package com.p2p_live.loaders
{
	import com.p2p_live.data.Chunk;
	import com.p2p_live.data.Chunks;
	import com.p2p_live.events.*;
	import com.p2p_live.managers.DataManager;
	import com.p2p_live.utils.CRC32;
	
	import flash.errors.EOFError;
	import flash.errors.IOError;
	import flash.events.*;
	import flash.net.URLRequest;
	import flash.net.URLStream;
	import flash.utils.ByteArray;
	import flash.utils.Timer;
	import flash.utils.setTimeout;
	
	public class HttpLiveDataLoader extends EventDispatcher 
	{
		private const HTTP_BUFFER_CLIP_NUM:uint = 1;
		private const HTTP_BUFFER_SEEK_CLIP_NUM:uint = 6;
		protected var _descLoader:HttpLiveDescLoader;
		protected var _descSeekLoader:HttpLiveSeekDescLoader;
		
		/**
		 * _taskList包含两类任务地址，一类是数据片段dat文件地址，
		 * 另一类是包含header地址的数组
		 */		
		protected var _taskList:Object;
		
		protected var _headerDataObj:Object;
		protected var _httpClient:URLStream;
		protected var _downloadingTask:uint;
		protected var _isHttpDownloading:Boolean;
		protected var _dataManager:DataManager;
		protected var _headerDownloaded:Boolean=false;
		protected var _headerSent:Boolean = false;
		//protected var _descUrl:String;
		/**
		 * _videoInfo保存播放文件desc的路径信息及相关
		 * _videoInfo.url  desc的完整路径，供直播时使用
		 * _videoInfo.path 当发生时移时，保存不发生变化的路径部分
		 * _videoInfo.loadingDate 当发生时移时，保存已经 加载 的dat文件路径 年与日时分钟 部分
		 * _videoInfo.playingDate 当发生时移时，保存正在 播放 的dat文件路径 年与日时分钟 部分
		 * _videoInfo.serverCurtime 服务器当前时间
		 * _videoInfo.offsetTime    本地时间与服务器时间的差值
		 * _videoInfo.abTime      时移的绝对时间
		 */		
		protected var _videoInfo:Object;		
		protected var _p2pLoader:P2PLoader;		
		protected var _isSeek:Boolean;			
		protected var _newestTime:Number;    //保存最新的文件片段对应的时间		
		protected var _firstStartTime:Number;//保存播放的第一块数据的时间值		
		protected var _CDNIndex:int = 0;     //保存正在使用的cdn数组的索引	
		
		/**
		 * _nextIndex保存预加载desc文件时的索引值，用来在所加载desc文件没有及时更新时重新加载
		*/
		protected var _nextIndex:uint;
			
		protected var _startErrorTime:Number = 0;
		
		protected var _offsetSeekStartTime:int = 0;
		
		public function HttpLiveDataLoader()
		{			
		}
		
		public function start(videoInfo:Object,dataManager:DataManager):void
		{
			clear();
			
			_videoInfo      = new Object();
			_videoInfo.url  = videoInfo.url;
			_videoInfo.path = videoInfo.path;
			_videoInfo.groupName     = videoInfo.groupName;
			_videoInfo.serverCurtime = Number(videoInfo.serverCurtime);
			_videoInfo.serverStartTime  = Number(videoInfo.serverStartTime);
			_videoInfo.serverOffsetTime = Number(videoInfo.serverOffsetTime);
			
			_dataManager = dataManager;			
			
			_httpClient = new URLStream();
			_httpClient.addEventListener(Event.COMPLETE, downloadCompleteHandler);			
			_httpClient.addEventListener(IOErrorEvent.IO_ERROR, downloadIOErrorHandler);			
			_httpClient.addEventListener(SecurityErrorEvent.SECURITY_ERROR, downloadSecurityErrorHandler);
			
			_p2pLoader=new P2PLoader(dataManager);	
			_p2pLoader.addEventListener(P2PLoaderEvent.STATUS,dispatchEvent);
			_p2pLoader.startLoadP2P(_videoInfo.groupName);	
			
			_descLoader = new HttpLiveDescLoader();				
			_descLoader.addEventListener(HttpLiveEvent.LOAD_DATA_STATUS,httpLiveDescLoad_STATUS);
			_descLoader.start(videoInfo.url[_CDNIndex]);
			
			_descSeekLoader = new HttpLiveSeekDescLoader();	
			_descSeekLoader.addEventListener(HttpLiveEvent.LOAD_DATA_STATUS,httpLiveDescLoad_STATUS);
		}
		
		public function checkData(data:ByteArray,index:uint):Boolean
		{
			var crc32:CRC32 = new CRC32();
			crc32.update(data);
			if(_taskList.hasOwnProperty(index))
			{	
				//trace("_taskList[index].checksum == crc32.getValue()",_taskList[index].checksum == crc32.getValue(),"_taskList[index].checksum=",_taskList[index].checksum ,"crc32.getValue()=",crc32.getValue())
				return _taskList[index].checksum == crc32.getValue();	//_taskList[index].checksum= 4097789226 ,crc32.getValue()= 1811952539
			}
			return false;
		}
		
		public function removeChunkIndex(curIndex:uint):void
		{
			for(var task:String in _taskList)
			{
				if(task != "header" && uint(task) < curIndex)
				{
					delete _taskList[task];
				}				
			}
		}
		public function removeWantData(index:uint):void
		{
			_p2pLoader.removeWantData(index,index);			
		}		
		public function removeHaveData(index:uint):void
		{
			_p2pLoader.removeHaveData(index,index);
		}
		public function nextChunkIndex(curIndex:uint):uint
		{
			var nextIndex:uint = uint.MAX_VALUE;
			for(var index:String in _taskList)
			{
				if(index != "header" && uint(index) > curIndex && uint(index) < nextIndex)
				{
					nextIndex = uint(index);
				}
			}
			
			if(nextIndex == uint.MAX_VALUE)
			{
				//当前已无最新的数据块
				return curIndex;
			}	
			//预加载时移desc
			preloadSeekDesc(nextIndex);
			
			var headerChanged:Boolean = needChangeHeader(nextIndex);
			if(headerChanged)
			{
				return 0;
			}
			return nextIndex;
		}
		
		private function needChangeHeader(nextIndex:uint):Boolean
		{
			for(var i:String in _headerDataObj){
				if(nextIndex >= uint(i))
				{
					var info:Object = new Object();
					info.code = HttpLiveEvent.CHANGE_METADATA;
					dispatchEvent(new HttpLiveEvent(HttpLiveEvent.LOAD_DATA_STATUS,info));
					
					info.code = HttpLiveEvent.LOAD_HEADER_SUCCESS;	
					info.startTime = nextIndex;
					info.data = _headerDataObj[i];
					dispatchEvent(new HttpLiveEvent(HttpLiveEvent.LOAD_DATA_STATUS,info));					
					delete _headerDataObj[i];
					
					return true;
				}
			}	
			for(var j:int=0 ; j<_taskList["header"].length ; j++)
			{
				if(nextIndex == uint(_taskList["header"][j]))
				{
					return true;
				}
			}
			return false;
		}
		
		private function preloadSeekDesc(nextIndex:uint):void
		{
			/** 
			 * 当时移时，分析是否已经是该分钟片段的第一块数据或发生时移读取的第一块数据，
			 * 如果是则开始加载下一分钟的desc文件
			 */			
			if(_isSeek)
			{
				if(_taskList[nextIndex] && _taskList[nextIndex]["first"] && _nextIndex != nextIndex)
				{				
					_nextIndex = nextIndex;
					
					_descSeekLoader.start(newComingDesc());
					//_startErrorTime = getTime();
					
					/*if(_taskList[nextIndex]["firstAndOffset"])
					{
						//如果是seek之后下一分钟的第一块数据
						_descSeekLoader.start(newComingDesc(true));
					}
					else
					{
						//如果是seek之后的第一块数据
						_descSeekLoader.start(newComingDesc());
					_startErrorTime = getTime();
					}*/
					//_startErrorTime = getTime();
				}				
			}
		}
		
		public function goonHttp(playID:uint):void
		{
			assignHttpTask();
		}
		
		public function get httpDownloadingTask():uint
		{
			return _downloadingTask;
		}
		
		public function clear():void
		{
			_videoInfo = null;	
			_newestTime = 0;
			if(_descLoader)
			{
				_descLoader.clear();
				_descLoader.removeEventListener(HttpLiveEvent.LOAD_DATA_STATUS,httpLiveDescLoad_STATUS);
				_descLoader = null;
			}
			if(_descSeekLoader)
			{
				_descSeekLoader.clear();
				_descSeekLoader.removeEventListener(HttpLiveEvent.LOAD_DATA_STATUS,httpLiveDescLoad_STATUS);
				_descSeekLoader = null;	
			}
			if(_httpClient)
			{
				if(_httpClient.connected)
				{
					try
					{
						_httpClient.close();					
					}
					catch(ex:IOError)
					{}	
				}				
				_httpClient.removeEventListener(Event.COMPLETE,downloadCompleteHandler);			
				_httpClient.removeEventListener(IOErrorEvent.IO_ERROR,downloadIOErrorHandler);			
				_httpClient.removeEventListener(SecurityErrorEvent.SECURITY_ERROR,downloadSecurityErrorHandler);				
				_httpClient = null;
			}
			if(_p2pLoader)
			{
				_p2pLoader.removeEventListener(P2PLoaderEvent.STATUS,dispatchEvent);
				_p2pLoader.clear();
				_p2pLoader = null;
			}
			reset();
		}
		
		private function reset():void
		{
			_downloadingTask = 0;
			_startErrorTime = 0;
			_isHttpDownloading = false;			
			_headerDownloaded = false;
			_headerSent = false;			
			_isSeek = false;			
			_headerDataObj = null;	
			
			//_offsetSeekBufferTime = 0;
			
			_offsetSeekStartTime = 0;
						
			if(_descLoader){
				_descLoader.clear();
			}			
			if(_httpClient && _httpClient.connected){
				_httpClient.close();
			}
			if(_descSeekLoader){
				_descSeekLoader.close();
			}
			_headerDataObj = new Object();
			_taskList = new Object();
			//_preSeekXML = new XML();
		}
		
		public function startSeek(obj:Object,dataManager:DataManager):void
		{
			//先判断该进度是否可由时移改为直播
			if(obj.backToLive)
			{
				start(_videoInfo,dataManager);
				return;
			}
			reset();	
			_isSeek = true;
			
			if(dataManager.chunks)
			{
				for(var i:String in dataManager.chunks)
				{
					if(dataManager.chunks.getChunk(uint(i)).iLoadType != 3)
					{
						if(dataManager.chunks.getChunk(uint(i)).iLoadType == 2)
						{
							removeWantData(uint(i));
						}
						dataManager.chunks.removeChunk(uint(i));
					}
				}
			}
			
			_videoInfo["abTime"] = obj.abTime;
			_videoInfo["playingDate"] = _videoInfo["loadingDate"] = obj.time;
			var url:String = _videoInfo["path"][_CDNIndex] + _videoInfo["loadingDate"];
			
			_startErrorTime = getTime();
			_descSeekLoader.start(url);	
			//
			var info:Object = new Object();
			info.code = HttpLiveEvent.CHANGE_METADATA;
			dispatchEvent(new HttpLiveEvent(HttpLiveEvent.LOAD_DATA_STATUS,info));
		}
		
		private function httpLiveDescLoad_STATUS(event:HttpLiveEvent):void
		{
			switch(event.info.code)
			{
				case HttpLiveEvent.LOAD_DESC_SUCCESS:
					/*
					if(_isSeek && _preSeekXML == (event.info.descXml as XML))
					{						
						trace("ccccccccccccccccccccccccccccccccccccc")
						preloadSeekDesc(_nextIndex,true);
						return;
					}
					_preSeekXML = event.info.descXml as XML;
					*/
					var newTaskList:Object = parseDesc(event.info.descXml as XML);
					if(newTaskList != null )
					{	
						if(!_isSeek)
						{
							syncTask(newTaskList);	
						}
						else
						{
							syncSeekTask(newTaskList);	
							/*if(_startErrorTime)
							{
								_errorTime += getTime()-_startErrorTime;
							    _startErrorTime = 0;
								trace(_errorTime);
							}*/							
						}
						assignHttpTask();						
					}
					dispatchEvent(event);
					break;
				case HttpLiveEvent.LOAD_DESC_IO_ERROR:					
				case HttpLiveEvent.LOAD_DESC_PARSE_ERROR:					
				case HttpLiveEvent.LOAD_DESC_SECURITY_ERROR:
					dispatchEvent(event);
					break;
				case HttpLiveEvent.LOAD_DESC_NOT_EXIST:
					if(_isSeek)
					{
						trace("--------------HttpLiveEvent.LOAD_DESC_NOT_EXIST---------------");
						_descSeekLoader.start(newComingDesc());
					}else
					{
						dispatchEvent(event);
					}
					break;
			}
		}
		
		private function assignHttpTask():void
		{	
			//is downloading?			
			if(_isHttpDownloading)
			{				
				return;	
			}
			//find the next task
			var nextTaskID:uint = 0;
			for( var strTaskID:String in _taskList)
			{
				if(strTaskID == "header")
				{
					continue;
				}
				
				var taskID:uint = uint( strTaskID );
				if(taskID >= _downloadingTask 
					&& (nextTaskID == 0 || taskID < nextTaskID) 
					&& (_dataManager.chunks.getChunk(taskID) == null || _dataManager.chunks.getChunk(taskID).iLoadType != 3))
				{
					nextTaskID = taskID;
				}
			}
			//是否需要下载header		
			var url:String = needLoadHeader(nextTaskID);			
			if(url){
				_headerDownloaded = false;
			}else{
				//是否需要下载clip
				url = needLoadClip(nextTaskID);
			}
			
			if(url){
				_httpClient.load(new URLRequest(url));
				//trace("download url:",url);
				_isHttpDownloading = true;	
			}
			
		}
		
		private function needLoadHeader(nextTaskID:uint):String
		{
			var url:String;
			for(var i:int=0 ; i<_taskList["header"].length ; i++)
			{
				var headerIndex:uint = uint(String(_taskList["header"][i]).split(".")[0]);
				
				if((headerIndex <= nextTaskID || nextTaskID == 0) //nextTaskID == 0 是在seek时，遇到了已经下载过的数据时发生的
					&& headerIndex > _downloadingTask)
				{
					_downloadingTask = String(_taskList["header"][i]).split(".")[0];
					
					url = _videoInfo.url[_CDNIndex].replace("desc.xml",String(_taskList["header"][i]));					
										
					return url;				
				}
			}
			return null;
		}
		
		private function needLoadClip(nextTaskID:uint):String
		{
			//no task to assign
			if(nextTaskID == 0 || !_p2pLoader.isLeader() &&  nextTaskID != 0 && limit(nextTaskID))
			{
				return null;
			}			
			//stop p2p downloading
			var chunk:Chunk = _dataManager.chunks.getChunk(nextTaskID); 
			if(chunk != null && chunk.iLoadType == 2)
			{
				removeWantData(nextTaskID);
			}			
			
			_downloadingTask = nextTaskID;
			if(chunk != null)
			{
				
				chunk.iLoadType = 1;
				chunk.begin = getTime();
				chunk.data = null;
				chunk.from = "http";
			}
			else
			{
				var obj:Object = new Object();
				obj.iLoadType = 1;
				obj.begin = getTime();
				obj.data = null;
				obj.from = "http";			
				obj.begin = getTime();							
				obj.end   = 0;
				obj.iLoadType = 1;
				obj.id = _downloadingTask;
				_dataManager.chunks.addChunk(obj);
				
			}	
			
			var url:String = _videoInfo.url[_CDNIndex].replace("desc.xml",_taskList[nextTaskID].name);
			return url;
		}
		
		private function limit(taskID:uint):Boolean
		{
			//trace("index=,",index)
			var compArr:Array=[];
			var nextIndex:uint=0;
			
			for(var i:String in _taskList)
			{
				if(i != "header"){
					compArr.push(uint(i));
				}				
			}
			var arr:Array=compArr.sort();
			var index:int=arr.indexOf(_dataManager.playHead);
			var indexTask:uint = arr.indexOf(taskID);
			
			if(!_isSeek)
			{
				if(indexTask == -1 || index == -1 || indexTask - index < HTTP_BUFFER_CLIP_NUM)
				{
					return false;
				}
			}
			else
			{
				if(indexTask == -1 || index == -1 || indexTask - index < HTTP_BUFFER_SEEK_CLIP_NUM)
				{
					return false;
				}
			}			
						
			return true;			
		}
		
		private function syncSeekTask(newTaskList:Object):void
		{
			if(newTaskList.hasOwnProperty("header"))
			{				
				if(!_taskList.hasOwnProperty("header")){
					_taskList["header"] = new Array();	
				}
				for(var i:String in newTaskList["header"]){
					if(_taskList["header"].indexOf(newTaskList["header"][i]) == -1){
						_taskList["header"].push(newTaskList["header"][i]);
					}
				}
			}
			
			for(var task:String in newTaskList)
			{
				if(task == "header")
				{
					continue;
				}
				
				if(!_taskList[task])
				{						
					/**
					 * 
					此处进行tasklist的任务添加，
					如果是seek之后第一次分配tasklist任务，则进行判断，将包含seek
					时间点的task及之后的task存入tasklist，以此保证当执行完seek时，
					从包含seek的时间点的数据块开始播放。
					
					_videoInfo["abTime"]只有seek后第一次分配任务时才作为判断的条件，
					当第一次分配任务结束时将清除，后续	时移分配任务时不用将_videoInfo["abTime"]作为判断条件
					*/
					if(!_videoInfo["abTime"])
					{
						if(newTaskList[task]["first"])
						{
							syncSeekAddTask(task,newTaskList[task],true);
						}
						else
						{
							syncSeekAddTask(task,newTaskList[task]);
						}						
					}
					else
					{
						if( uint(task) < _videoInfo.abTime )
						{
							if( _videoInfo.abTime*1000 <= (uint(task)*1000 + uint(newTaskList[task]["playTime"])) )
							{
								syncSeekAddTask(task,newTaskList[task],true);
							}
						}
						else
						{
							syncSeekAddTask(task,newTaskList[task]);
						}
					}										
				}
			}
			if(_videoInfo["abTime"])
			{
				delete _videoInfo["abTime"];
			}			
		}
		/**
		 * 参数
		 * first:是否可以预加载下一分钟片段的标记，此标记目前添加给seek之后的第一块读取的数据或每个分钟片段的第一块数据
		 * isOffset：此变量为每个分钟片段的第一块数据的标记，在预加载下一分钟数据时当读到此标记则需将errorTime(误差时间)
		 * 添加到请求地址，如果是时移后的第一块数据则不用添加此标记
		 * */
		private function syncSeekAddTask(task:String,taskObj:Object,first:Boolean=false):void
		{
			_taskList[task] = taskObj;
			if(first)
			{
				_taskList[task]["first"] = true;
			}
			if(_dataManager.chunks.getChunk(uint(task)) == null
				|| _dataManager.chunks.getChunk(uint(task)).iLoadType != 3)
			{
				addP2PChunk(uint(task));	
			}
		}
		
		private function syncTask(newTaskList:Object):void
		{			
			//start p2p-download the new coming task
			var lastTask:uint = lastTask();
			for(var name:String in newTaskList)
			{						
				if(name!="header")
				{
					if(!_taskList.hasOwnProperty(name) && uint(name) > lastTask)
					{
						_taskList[name] = newTaskList[name];
						addP2PChunk(uint(name));
					}
											
				}else{
					for(var j:int=0 ; j< newTaskList["header"].length ; j++)
					{
						if(!_taskList["header"]){
							_taskList["header"] = new Array();
						}
						if(_taskList["header"].indexOf(newTaskList["header"][j]) == -1){
							_taskList["header"].push(newTaskList["header"][j]);
						}
					}					
				}
			}
		}
		
		private function addP2PChunk(index:uint):void
		{
			var obj:Object = new Object();
			obj.data = null;
			obj.from = "p2p";						
			obj.begin = getTime();							
			obj.end   = 0;
			obj.iLoadType = 2;
			obj.id = index;
			_dataManager.chunks.addChunk(obj);
			if(_dataManager.isJoinNetGroup)
			{
				_p2pLoader.addWantData(index,index);
			}
		}
		
		private function lastTask():uint
		{
			var lastTask:uint = 0;
			for(var name:String in _taskList){
				if(name != "header" && uint(name) > lastTask){
					lastTask = uint(name);
				}		
			}
			return lastTask;
		}
		
		private function firstTask():uint
		{
			var firstTask:uint = uint.MAX_VALUE;
			for(var name:String in _taskList){
				if(name != "header" && uint(name) < firstTask){
					firstTask = uint(name);
				}		
			}
			return firstTask;
		}
		
		private function parseDesc(descXml:XML):Object
		{
			if(descXml.elements("*").length() <= 0)
			{
				return null;
			}
			try
			{			
				var taskList:Object = new Object();
				var theFirst:uint = 0;
				
				for each (var clipObj:XML in descXml.clip)
				{					
					var name:String = clipObj.@name;	
					var nameArray:Array = name.split("/");
					if(nameArray.length <= 0)
					{
						continue;
					}
					nameArray = String(nameArray[nameArray.length - 1]).split(".");
					nameArray = String(nameArray[0]).split("_");
					if(nameArray.length <= 0)
					{
						continue;
					}
					var clip:Object = new Object();
					clip.name = name;
					clip.checksum = String(clipObj.@checksum);
					clip.playTime = String(nameArray[1]).split("_");
					taskList[uint(nameArray[0])] = clip;
					//					
					if(_isSeek)
					{
						if(theFirst == 0 || theFirst > uint(nameArray[0]))
						{
							theFirst = uint(nameArray[0]);
						}
					}
				}
				
				if(_isSeek && theFirst != 0 && taskList[theFirst])
				{
					taskList[theFirst]["first"] = true;
				}
				//
				var header:Array = new Array();
				var i:int = 0;
				while(descXml.header[i])
				{
					header[i] = String(descXml.header[i].@name);
					i++;
				}
				taskList["header"] = header;
				//
				return taskList;
			}
			catch(ex:Error)
			{
				//TODO...
				var info:Object = new Object();
				info.code = HttpLiveEvent.LOAD_DESC_PARSE_ERROR;
				var event:HttpLiveEvent = new HttpLiveEvent(HttpLiveEvent.LOAD_DATA_STATUS,info);
				dispatchEvent(event);				
			}
			return null;
		}
		
		private function downloadCompleteHandler(event:Event):void 
		{	
			var info:Object = new Object();
			info.from = "http";
			_isHttpDownloading = false;
			var e:HttpLiveEvent = new HttpLiveEvent(HttpLiveEvent.LOAD_DATA_STATUS,info);			
			//is header
			if(!_headerDownloaded && !_headerDataObj.hasOwnProperty(_downloadingTask))
			{
				_headerDownloaded = true;		
				var data:ByteArray = new ByteArray();
				_httpClient.readBytes(data);
				
				if(!_headerSent)
				{
					info.code = HttpLiveEvent.LOAD_HEADER_SUCCESS;
					info.data = data;					
									
					dispatchEvent(e);
					_headerSent = true;						
				}
				else
				{
					_headerDataObj[_downloadingTask] = data;
				}	
				assignHttpTask();
				return;
			}
			
			//is clip			
			info.size = _httpClient.bytesAvailable;
			info.data = new ByteArray();
			_httpClient.readBytes(info.data);			
			info.code = HttpLiveEvent.LOAD_CLIP_SUCCESS;
			info.id = _downloadingTask;
			dispatchEvent(e);			
			//assign a new http task			
			assignHttpTask();
		}
		
		private function downloadIOErrorHandler(event:IOErrorEvent):void
		{
			var info:Object = new Object();
			_isHttpDownloading = false;
			if(!_headerDownloaded)
			{
				info.code = HttpLiveEvent.LOAD_HEADER_IO_ERROR;
			}else
			{
				info.code = HttpLiveEvent.LOAD_CLIP_SUCCESS;
			}						
			var e:HttpLiveEvent = new HttpLiveEvent(HttpLiveEvent.LOAD_DATA_STATUS,info);
			dispatchEvent(e);	
			//尝试从下一个cdn地址下载
			_CDNIndex = nextCDNIndex(_CDNIndex);
			//assign a new http task
			assignHttpTask();
		}
		
		private function downloadSecurityErrorHandler(event:SecurityErrorEvent):void
		{
			var info:Object = new Object();
			_isHttpDownloading = false;
			if(!_headerDownloaded)
			{
				info.code = HttpLiveEvent.LOAD_HEADER_SECURITY_ERROR;
			}else
			{
				info.code = HttpLiveEvent.LOAD_CLIP_SECURITY_ERROR;
			}						
			var e:HttpLiveEvent = new HttpLiveEvent(HttpLiveEvent.LOAD_DATA_STATUS,info);
			dispatchEvent(e);
			//尝试从下一个cdn地址下载
			_CDNIndex = nextCDNIndex(_CDNIndex);
			//assign a new http task
			assignHttpTask();
		}
		
		private function nextCDNIndex(index:int):int
		{
			index++;
			if(index >= _videoInfo.url.length)
			{
				index = 0;
			}
			return index;
		}
		
		private function newComingDesc(offset:Boolean=false):String
		{	
			trace("_startErrorTime1 = "+_startErrorTime);
			_videoInfo["loadingDate"] = _videoInfo["loadingDate"] + 60 - Math.round((getTime() - _startErrorTime) / 1000);
			var url:String = _videoInfo.path[_CDNIndex] + _videoInfo["loadingDate"];
			_startErrorTime = getTime();
			trace("_startErrorTime2 = "+_startErrorTime);			
			return url;
		}
		
		private function getTime():Number 
		{
			return Math.floor((new Date()).time);
		} 
	}
}